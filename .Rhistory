functionalizeInput<-function(expr){
substitute(x)
}
functionalizeInput({"whatclassisthis"})
functionalizeInput<-function(expr){
substitute(expr)
}
functionalizeInput({"whatclassisthis"})
tmp<-functionalizeInput({"whatclassisthis"})
str(tmp)
tmp2<-functionalizeInput("whatclassisthis")
str(tmp)
tmp<-functionalizeInput({print("whatclassisthis")})
tmp
str(tmp)
str(tmp2)
class(tmp)
class(tmp2)
typeof(tmp)
funcionalizeInput.default<-function(expr){
stop(paste0("<Error> No Sandboxing Method for inputs of class <",class(expr),">.\nPlease provide either an expression or character."))
}
functionalizeInput.language<-function(expr){
expr <- eval(substitute(x))
func<-eval(call("function",NULL,expr))
return(func)
}
functionalizeInput.character<-function(expr){
expr<-parse(text = paste0("{",paste(readLines(expr),collapse=""),"}"))[[1]]
func<-eval(call("function",NULL,expr))
return(func)
}
functionalizeInput({print("whatclassisthis")})
functionalizeInput("tests/testthat/sample_script_1.R")
functionalizeInput
functionalizeInput<-function(expr){
UseMethod("functionalizeInput")
}
functionalizeInput.default<-function(expr){
stop(paste0("<Error> No Sandboxing Method for inputs of class <",class(expr),">.\nPlease provide either an expression or character."))
}
functionalizeInput.language<-function(expr){
expr <- eval(substitute(x))
func<-eval(call("function",NULL,expr))
return(func)
}
functionalizeInput.character<-function(expr){
expr<-parse(text = paste0("{",paste(readLines(expr),collapse=""),"}"))[[1]]
func<-eval(call("function",NULL,expr))
return(func)
}
functionalizeInput("tests/testthat/sample_script_1.R")
functionalizeInput.character<-function(expr){
expr<-parse(text = paste(readLines(expr),collapse="\n"))[[1]]
func<-eval(call("function",NULL,expr))
return(func)
}
functionalizeInput("tests/testthat/sample_script_1.R")
readLines("tests/testthat/sample_script_1.R")
paste(readLines("tests/testthat/sample_script_1.R"),collapse="\n")
paste(readLines("tests/testthat/sample_script_1.R"),collapse="\n")
parse(text=paste(readLines("tests/testthat/sample_script_1.R"),collapse="\n"))[[1]]
parse(text=paste(readLines("tests/testthat/sample_script_1.R"),collapse="\n"))
parse(text=paste(readLines("tests/testthat/sample_script_1.R"),collapse="\n"))[1]
eval(parse(text=paste(readLines("tests/testthat/sample_script_1.R"),collapse="\n")))[1]
eval(parse(text=paste(readLines("tests/testthat/sample_script_1.R"),collapse="\n")))
parse(parse(text=paste(readLines("tests/testthat/sample_script_1.R"),collapse="\n")))
parse(substitute(parse(text=paste(readLines("tests/testthat/sample_script_1.R"),collapse="\n"))))
substitute(parse(text=paste(readLines("tests/testthat/sample_script_1.R"),collapse="\n")))
parse(text=paste(readLines("tests/testthat/sample_script_1.R"),collapse="\n"))
parse(text=paste(readLines("tests/testthat/sample_script_1.R"),collapse="\n"))[[1]]
parse(text=paste("{",paste(readLines("tests/testthat/sample_script_1.R"),collapse="\n"),"}"))
parse(text=paste("{",paste(readLines("tests/testthat/sample_script_1.R"),collapse="\n"),"}"))[[1]]
parse(text=paste("{",paste(readLines("tests/testthat/sample_script_1.R"),collapse="\n"),"}"))[1]
functionalizeInput.character<-function(expr){
expr<-parse(text = paste("{",paste(readLines(expr),collapse="\n"),"}"))[[1]]
func<-eval(call("function",NULL,expr))
return(func)
}
functionalizeInput("tests/testthat/sample_script_1.R")
functionalizeInput("tests/testthat/sample_script_1.R")
functionalizeInput({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
})
sub_wrap<-function(x){substitute(x)}
functionalizeInput(sub_wrap(){
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
}))
functionalizeInput(sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
}))
sub_wrap<-function(x){expression(x)}
sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
})
sub_wrap<-function(x){as.expression(x)}
sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
})
test,-sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
})
test<-sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
})
test
sub_wrap<-function(x){as.expression(substitute(x))}
test
test<-sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
})
test
class(expression)
sub_wrap<-function(x){as.expression(substitute(x))[[1]]}
test<-sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
})
class(expression)
class(etest)
class(test)
functionalizeInput.`{`<-function(expr){
expr <- eval(substitute(x))
func<-eval(call("function",NULL,expr))
return(func)
}
functionalizeInput.`\{`<-function(expr){
expr <- eval(substitute(x))
func<-eval(call("function",NULL,expr))
return(func)
}
functionalizeInput.{<-function(expr){
sub_wrap<-function(x){as.expression(substitute(x))}
test<-sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
})
test
class(test)
test<-sub_wrap("tests/testthat/sample_script_1.R")
test
eval(test)
test<-sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
})
eval(test)
eclass(val(test))
eval(class(test))
class(evaltest))
class(eval(test))
sub_wrap<-function(x){substitute(x)[[1]]}
functionalizeInput("tests/testthat/sample_script_1.R")
test<-sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
})
test
sub_wrap<-function(x){substitute(x)[[2]]}
test<-sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
})
test
sub_wrap<-function(x){unlist(substitute(x))}
test<-sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
})
test
class(test)
as.character(test)
as.call(test)
test2<0as.call(test)
test2<-as.call(test)
class
class(test2)
test2<-call(test)
test2<-as.expression(test)
test2
class(test2)
eval(test2)
eval(substitute(test2))
sub_wrap<-function(x){as.expression(unlist(substitute(x)))}
functionalizeInput(sub_wrap("tests/testthat/sample_script_1.R"))
sub_wrap("tests/testthat/sample_script_1.R")
testFunc
class(test)
test
functionalizeInput.`{`<-function(expr){
expr <- eval(substitute(x))
func<-eval(call("function",NULL,expr))
return(func)
}
functionalizeInput.`\{`<-function(expr){
expr <- eval(substitute(x))
func<-eval(call("function",NULL,expr))
return(func)
}
shiny::reactive
shiny:::exprToFunction
test
is.expression(test)
str(test)
testFunc()
testFunc
testFunc<-function(x){quote(x)}
testFunc({"Hello World"})
tmp<-testFunc({"Hello World"})
tmp
eval(tmp)
?quote
enquote(test)
test3,-enquote(test)
test3<-enquote(test)
class(test3)
test3
eval(test3)
eq_wrap<-function(x){enquote(x)}
eq_wrap({print(42)})
eq_wrap<-function(x){enquote(substitute(x))}
eq_wrap({print(42)})
eq_wrap("testthis")
test1<-eq_wrap({print(42)})
test2<-eq_wrap("testthis")
class(test1)
str(test1)
str(test3)
str(test2)
str(test1[[2]])
str(test1[[1]])
class(test1[[1]])
class(test2[[1]])
class(test2[[2]])
class(test2[[2]])
test2[[2]]
test1[[2]]
class(test1[[2]])
class(test1[[3]])
class(test2[[3]])
class(test2[[2]])
class(test1[[3]])
class(test2[[1]])
class(test1[[1]])
str(test1[[1]])
str(test2[[1]])
str(test2[[2]])
str(test2[[2]])
str(test1[[2]])
str(test2[[2]])[[1]]
str(test1[[2]])[[1]]
?str
str(test1[[2]],"class")
str(test2[[2]],"class")
attr(test1[[2]],"class")
attr(test2[[2]],"class")
functionalizeInput.default<-function(expr){
stop(paste0("<Error> No Sandboxing Method for inputs of class <",class(expr),">.\nPlease provide either an expression or character."))
}
?case
??case
sub_wrap
sub_wrap<-function(x){substitute(x)}
?switch
functionalizeInput(sub_wrap("tests/testthat/sample_script_1.R"))
functionalizeInput(sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
}))
functionalizeInput<-function(expr){
# UseMethod("functionalizeInput")
print(class(expr))
switch(class(expr)[1],
"{"=functionalizeInput.curly(expr),
"character"=functionalizeInput.character(expr),
functionalizeInput.default(expr)
)
}
functionalizeInput(sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
}))
functionalizeInput<-function(expr){
# UseMethod("functionalizeInput")
print(class(expr)[1])
switch(class(expr)[1],
"{"=functionalizeInput.curly(expr),
"character"=functionalizeInput.character(expr),
functionalizeInput.default(expr)
)
}
functionalizeInput(sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
}))
functionalizeInput.default<-function(expr){
stop(paste0("<Error> No Sandboxing Method for inputs of class <",class(expr),">.\nPlease provide either an expression or character."))
}
functionalizeInput<-function(expr){
# UseMethod("functionalizeInput")
print(class(expr)[1])
switch(class(expr)[1],
"{"=functionalizeInput.curly(expr),
"character"=functionalizeInput.character(expr),
functionalizeInput.default(expr)
)
}
functionalizeInput(sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
}))
functionalizeInput.curly<-function(expr){
expr <- eval(substitute(x))
func<-eval(call("function",NULL,expr))
return(func)
}
functionalizeInput<-function(expr){
# UseMethod("functionalizeInput")
switch(class(expr)[1],
"{"=functionalizeInput.default(expr),
"character"=functionalizeInput.character(expr),
functionalizeInput.default(expr)
)
}
functionalizeInput.default<-function(expr){
stop(paste0("<Error> No Sandboxing Method for inputs of class <",class(expr),">.\nPlease provide either an expression or character."))
}
functionalizeInput.curly<-function(expr){
expr <- eval(substitute(x))
func<-eval(call("function",NULL,expr))
return(func)
}
functionalizeInput.character<-function(expr){
expr<-parse(text = paste("{",paste(readLines(expr),collapse="\n"),"}"))[[1]]
func<-eval(call("function",NULL,expr))
return(func)
}
functionalizeInput(sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
}))
functionalizeInput
functionalizeInput<-function(expr){
# UseMethod("functionalizeInput")
switch(class(expr)[1],
"{"=functionalizeInput.curly(expr),
"character"=functionalizeInput.character(expr),
functionalizeInput.default(expr)
)
}
functionalizeInput(sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
}))
functionalizeInput.curly<-function(expr){
expr <- eval(substitute(expr))
func<-eval(call("function",NULL,expr))
return(func)
}
functionalizeInput(sub_wrap({
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
}))
functionalizeInput.curly<-function(expr){
expr <- eval(substitute(expr))
func<-eval(call("function",NULL,expr))
return(func)
}
functionalizeInput(sub_wrap("tests/testthat/sample_script_1.R"))
usethis::use_test("functionalizeInput")
sandbox_wrap<-function(x){substitute(x)} #performs processing done in sandbox function prior
sandbox_wrap<-function(x){substitute(x)} #performs processing done in sandbox function prior
test_that("Character vectors read in source and are returned as functions", {
funcionalized<-function(){
testDF <- data.frame(x = 1:5, y = runif(5))
print(testDF)
}
expect_equivalent(functionalizeInput("sample_script_1.R"),funcionalized)
})
functionalizedInput(42)
functionalizeInputt(42)
functionalizeInput(42)
functionalizeInput(factor("factorTime"))
library(sandbox)
expr<-sandbox_wrap({
set.seed(42)
generateDF<-function(ncols=1,nrows=1){
do.call('cbind',lapply(seq(1,ncols),function(x,y){runif(y)},nrows))
}
testDF <- generateDF(10,10)
print(testDF)
})
expr
funcionalized<-function(){
set.seed(42)
generateDF<-function(ncols=1,nrows=1){
do.call('cbind',lapply(seq(1,ncols),function(x,y){runif(y)},nrows))
}
testDF <- generateDF(10,10)
print(testDF)
}
expect_equivalent(functionalizeInput(expr),funcionalized)
testthat::expect_equivalent(functionalizeInput(expr),funcionalized)
usethis::use_test("sanboxing")
sandbox({"hello world"})
test<-sandbox({"hello world"})
test
test$outputs
test$source()
test$source
test$metadata
output<-sandbox({
set.seed(42)
generateDF<-function(ncols=1,nrows=1){
do.call('cbind',lapply(seq(1,ncols),function(x,y){runif(y)},nrows))
}
testDF <- generateDF(10,10)
print(testDF)
})
testFunc<-function(){
print("Dont Evaluate Me")
}
testObject<-42
output1<-sandbox({
testFunc()
})
output2<-sandbox({
print(testObject)
})
output1
library(testthat)
output1$outputs
purrr::map(output1$outputs,class)
output1$outputs[[1]]
expect_error(output1$outputs[[1]],"could not find function")
expect_match(output1$outputs[[1]],"could not find function")
expect_match(print(output1$outputs[[1]]),"could not find function")
output1$outputs[[1]]
output1$outputs[[1]][[1]]
output2
expect_match(output2$outputs[[1]][[1]],"object '*' not found")
expect_match(output2$outputs[[1]][[1]],"object '*' not found",perl = TRUE)
grepl("object '*' not found",output2$outputs[[1]][[1]],perl = TRUE)
grepl("object '.+' not found",output2$outputs[[1]][[1]],perl = TRUE)
expect_match(output2$outputs[[1]][[1]],"object '.+' not found",perl = TRUE,)
expect_match(output2$outputs[[1]][[1]],"object '.+' not found")
library(sandbox)
devtools::test_coverage()
output<-capture.output(sandbox({
set.seed(42)
generateDF<-function(ncols=1,nrows=1){
do.call('cbind',lapply(seq(1,ncols),function(x,y){runif(y)},nrows))
}
testDF <- generateDF(10,10)
print(testDF)
}))
output
output<-capture.output(sandbox({
set.seed(42)
generateDF<-function(ncols=1,nrows=1){
do.call('cbind',lapply(seq(1,ncols),function(x,y){runif(y)},nrows))
}
testDF <- generateDF(1,1)
print(testDF)
}))
output
testthat::expect_identical(output,c("         [,1]","[1,] 0.914806"))
test_that("Expressions containing functions are properly generated", {
expr<-sandbox_wrap({
set.seed(42)
generateDF<-function(ncols=1,nrows=1){
do.call('cbind',lapply(seq(1,ncols),function(x,y){runif(y)},nrows))
}
testDF <- generateDF(10,10)
print(testDF)
})
funcionalized<-function(){
set.seed(42)
generateDF<-function(ncols=1,nrows=1){
do.call('cbind',lapply(seq(1,ncols),function(x,y){runif(y)},nrows))
}
testDF <- generateDF(10,10)
print(testDF)
}
expect_equivalent(functionalizeInput(expr),funcionalized)
wa})
expr<-sandbox_wrap({
set.seed(42)
generateDF<-function(ncols=1,nrows=1){
do.call('cbind',lapply(seq(1,ncols),function(x,y){runif(y)},nrows))
}
testDF <- generateDF(10,10)
print(testDF)
})
funcionalized<-function(){
set.seed(42)
generateDF<-function(ncols=1,nrows=1){
do.call('cbind',lapply(seq(1,ncols),function(x,y){runif(y)},nrows))
}
testDF <- generateDF(10,10)
print(testDF)
}
expect_equivalent(functionalizeInput(expr),funcionalized)
devtools::test_coverage()
