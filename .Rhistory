sandbox:::.onLoad("testlib","testPackage")
options("Sandbox_scriptdir")
options("Sandbox_masterNode")
Sys.info()[["nodename"]]
library(sandbox)
nodeID<-options("Sandbox_masterNode")
scriptdir<-options("Sandbox_scriptdir")
nodeID
options("Sandbox_masterNode")[[1]]
options("Sandbox_scriptdir")[[1]]
Sys.info()[["nodename"]]
options("Sandbox_masterNode")[[1]]==Sys.info()[["nodename"]]
sandbox:::.onLoad
options("Sandbox_scriptdir")[[1]]
nodeID<-options("Sandbox_masterNode")
scriptdir<-options("Sandbox_scriptdir")
sandbox:::.onLoad("testlib","testPackage")
expect_true(options("Sandbox_masterNode")[[1]]==Sys.info()[["nodename"]])
expect_true(options("Sandbox_scriptdir")[[1]]==file.path("testlib","testPackage"))
options("Sandbox_scriptdir")
options("Sandbox_scriptdir")[[1]]
options("Sandbox_masterNode")[[1]]
options("Sandbox_scriptdir")[[1]]
scriptdir
options("Sandbox_scriptdir"=scriptdir)
library(sandbox)
path.package("sandbox")
dirname(scriptdir)
dirname(scriptdir[[1]])
devtools::test_coverage()
usethis::use_test("sandboxConnectionTemplate")
sbTemplate<-sandboxConnectionTemplate()
sbTemplate
sandboxConnectionTemplate
devtools::test_coverage()
devtools::test_coverage()
??rhub
devtools::check_rhub()
con <- socketConnection(host = "192.168.0.31",
port = 20202,
server=TRUE,
blocking=TRUE,
open="a+b")
con <- socketConnection(host = "192.168.0.31",
port = 20202,
server=FALSE,
blocking=TRUE,
open="a+b")
con <- socketConnection(host = "192.168.0.31",
port = "",
server=FALSE,
blocking=TRUE,
open="a+b")
con <- socketConnection(host = "192.168.0.31",
port = "22",
server=FALSE,
blocking=TRUE,
open="a+b")
con
close(con)
close(con)
con <- socketConnection(host = "192.168.0.31",
port = "22",
server=TRUE,
blocking=TRUE,
open="a+b")
serialize("hello world",connection = con)
serialize(object = "hello world",connection = con)
unserialize(con)
close(con)
con <- socketConnection(host = "192.168.0.31",
port = "22",
server=TRUE,
blocking=TRUE,
open="a+b")
unserialize(con)
serialize("testObj2",con)
system("ipconfig")
system("ipconfig",intern = TRUE)
Sys.info()
Sys.getpid()
ipconf
ipconf<-system("ipconfig",intern = TRUE)
ipconf
gsub("(([0-9]{1,3})[.]){3}([0-9]{1,3}){1}'","",ipconf[grepl("IPv4 Address",ipconf)])
gsub("(.*)((([0-9]{1,3})[.]){3}([0-9]{1,3}){1})(.*)","\\2",ipconf[grepl("IPv4 Address",ipconf)])
gsub("(.*)(((\\d)[.]){3}([0-9]{1,3}){1})(.*)","\\2",ipconf[grepl("IPv4 Address",ipconf)])
gsub("(.*)((\\d[.]){3}([0-9]{1,3}){1})(.*)","\\2",ipconf[grepl("IPv4 Address",ipconf)])
gsub("(.*)((\\d[.])+(\\d))(.*)","\\2",ipconf[grepl("IPv4 Address",ipconf)])
gsub("(.*)(\\s)((\\d+[.])+(\\d+))(.*)","\\3",ipconf[grepl("IPv4 Address",ipconf)])
Sys.info()[["nodename"]]
close(con)
con <- socketConnection(host = "192.168.0.31",
port = "22",
server=TRUE,
blocking=TRUE,
open="a+b")
con <- socketConnection(host = "192.168.0.31",
port = "22",
server=TRUE,
blocking=TRUE,
open="a+b")
Sys.getenv("MASTER")
con <- socketConnection(host = "192.168.0.31",
port = "22",
server=TRUE,
blocking=TRUE,
open="a+b")
Sys.info()["nodename"]
Sys.getenv("MASTER")
Sys.getenv(")
")"
)
)
")
Sys.getenv()
Sys.info()
system("ssh -l ellis 192.168.0.31 pwd")
system("ssh --help")
rstudioapi::askForPassword("Database password")
system("ssh -l ellish 192.168.0.31 pwd < AltPass")
system("ssh -l ellish 192.168.0.31 pwd << AltPass")
system("ssh -l ellish 192.168.0.31 pwd",input = "9917NE16thPL")
clear
system("ssh -l ellish 192.168.0.31 pwd",show.output.on.console = TRUE)
install.packages("ssh")
library(ssh)
session<-ssh_connect("192.168.0.31")
session<-ssh_connect("ellis@192.168.0.31")
sbConnection$host
r_exe<-switch(sbConnection$host,
"localhost"=switch(.Platform$OS.type,
"windows"=file.path(R.home("bin"), "Rscript.exe"),
file.path(R.home("bin"), "Rscript")),
"Rscript")
r_exe
sbConnection$host<-"192.168.0.31"
r_exe
r_exe<-switch(sbConnection$host,
"localhost"=switch(.Platform$OS.type,
"windows"=file.path(R.home("bin"), "Rscript.exe"),
file.path(R.home("bin"), "Rscript")),
"Rscript")
r_exe
cmd<-"pwd"
ssh_exec_wait(session,cmd)
# rscript<-file.path(find.package("sandbox"),"sandbox","start_ext_Rsession.R")
cmd<-paste(r_exe,"--vanilla --slave",rscript,sbConnection$localnode,sbConnection$port)
cmd
getLocalIP<-function(){
switch(.Platform$OS.type,
"windows"=ip.windows(),
ip.unix())
}
ip.windows<-function(){
ipconf<-system("ipconfig",intern = TRUE)
IP<-gsub("(.*)(\\s)((\\d+[.])+(\\d+))(.*)","\\3",ipconf[grepl("IPv4 Address",ipconf)])
IP[1] #first IP address is the internal IP address of the machine
}
ip.unix<-function(){
ipconf<-system("ifconfig",intern = TRUE)
IP<-gsub("(.+)(inet )((\\d+[.])+(\\d+))(.*)","\\3",ipconf[grepl("IPv4 Address",ipconf)])
IP[length(IP)] #last IP address is the internal IP address of the machine
}
sbConnection$localnode<-getLocalIP()
sbConnection
# rscript<-file.path(find.package("sandbox"),"sandbox","start_ext_Rsession.R")
cmd<-paste(r_exe,"--vanilla --slave",rscript,sbConnection$localnode,sbConnection$port)
cmd
ssh_exec_wait(session,cmd)
library(sandbox)
options("Sandbox_masterNode")
devtools::install()
nodeID<-options("Sandbox_masterNode")[[1]]
scriptdir<-options("Sandbox_scriptdir")[[1]]
nodeID
sandbox({print("hello")})
cmd<-paste("Rscript --vanilla --slave -e 'sandbox:::externalInit('",sbConnection$localnode,"',",sbConnection$port)
cmd
cmd<-paste("Rscript --vanilla --slave -e 'sandbox:::externalInit('",sbConnection$localnode,"',",sbConnection$port,")'")
cmd
cmd<-paste0("Rscript --vanilla --slave -e 'sandbox:::externalInit('",sbConnection$localnode,"',",sbConnection$port,")'")
cmd
cmd<-paste0("Rscript --vanilla --slave -e 'sandbox:::externalInit(\"",sbConnection$localnode,"\",",sbConnection$port,")'")
cmd
rscript<-file.path(options("Sandbox_scriptdir"), "start_ext_Rsession.R")
#to enable passing testing
if(!file.exists(rscript)){
rscript<-file.path(options("Sandbox_scriptdir"),"inst", "start_ext_Rsession.R")
}
rscript
library(sandbox)
sandbox({print("hello")},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
cmd<-paste0("Rscript --vanilla --slave -e 'sandbox:::externalInit(\"",sbConnection$localnode,"\",",sbConnection$port,")'")
ssh_exec_wait(session,cmd)
session <- ssh_connect(paste0(sbConnection$username,"@",sbConnection$host))
sbConnection$username
sbConnection$username<-"ellis"
sbConnection$host
session <- ssh_connect(paste0(sbConnection$username,"@",sbConnection$host))
cmd<-paste0("Rscript --vanilla --slave -e 'sandbox:::externalInit(\"",sbConnection$localnode,"\",",sbConnection$port,")'")
ssh_exec_wait(session,cmd)
ssh_exec_wait(session,"Rscript -e getwd()")
ssh_exec_wait(session,"Rscript -e getwd\(\)")
ssh_exec_wait(session,"Rscript -e getwd\\\)")
ssh_exec_wait(session,"Rscript -e getwd\\(\\)")
cmd<-paste0("Rscript --vanilla --slave -e sandbox:::externalInit\\(\"",sbConnection$localnode,"\",",sbConnection$port,"\\)")
ssh_exec_wait(session,cmd)
cmd<-paste0("Rscript --vanilla --slave -e sandbox:::externalInit\\(\\\"",sbConnection$localnode,"\\\",",sbConnection$port,"\\)")
cmd
cmd<-paste0("Rscript --vanilla --slave -e sandbox:::externalInit\\('",sbConnection$localnode,"',",sbConnection$port,"\\)")
cmd
ssh_exec_wait(session,"Rscript -e print\\('testprint'\\)")
ssh_exec_wait(session,"Rscript -e print\\(\'testprint\'\\)")
ssh_exec_wait(session,"Rscript -e print\\(\\'testprint\\'\\)")
cmd<-paste0("Rscript --vanilla --slave -e sandbox:::externalInit\\(\\'",sbConnection$localnode,"\\',",sbConnection$port,"\\)")
sandbox({print("hello")},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
sandbox:::makeExternalRSession.ssh
library(sandbox)
sandbox({print("hello")},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
sandbox:::makeExternalRSession.ssh
library(sandbox)
sandbox({print("hello")},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
cmd<-paste0("Rscript --vanilla --slave -e \"sandbox:::externalInit\\\\(\\\\'",sbConnection$localnode,"\\\\',",sbConnection$port,"\\\\)\"")
cmd
library(sandbox)
sandbox({print("hello")},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
devtools::document()
devtools::document()
devtools::document()
Sys.info()[["name"]]
Sys.info()[["nodename"]]
library(sandbox)
sandbox({print("hello")},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
library(sandbox)
sandbox({print("hello")},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
sandbox({print("hello")},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
sandbox:::getLocalIP()
socketCon<-socketConnection("162.168.0.31",22,server = TRUE,blocking=TRUE,open="a+b")
socketCon<-socketConnection("192.168.0.31",22,server = TRUE,blocking=TRUE,open="a+b")
close(socketCon)
sandbox({print("hello")},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
sandbox({print("hello")},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
test<-unserialize(sandboxCon)
test
devtools::install()
sandbox({print("hello")},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
sbConnection<-sandboxConnectionTemplate("192.168.0.31",username = "ellis")
sbConnection
sandbox
isServer<-sbConnection$host==sbConnection$localnode
isServer
# con <- make.socket(host, ID)
con <- socketConnection(host = sbConnection$host,
port = sbConnection$port,
server=isServer,
blocking=TRUE,
open="a+b")
con
close(con)
con
library(sandbox)
sandbox({print("hello")},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
con <- socketConnection(host = sbConnection$host,
port = sbConnection$port,
server=isServer,
blocking=TRUE,
open="a+b")
con
sbConnection$localnode
close(con)
con <- socketConnection(host = sbConnection$host,
port = sbConnection$port,
server=TRUE,
blocking=TRUE,
open="a+b")
serialize("test",con)
unserialize(con)
devtools::install()
sandbox({print("hello")},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
receiveSand
sandbox:::receiveSand
toeval<-functionalizeInput(substitute({print("hello")}));sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis")
toeval<-sandbox:::functionalizeInput(substitute({print("hello")}));sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis")
toeval()
toeval
sandboxSession
isServer<-sbConnection$host==sbConnection$localnode
isServer
localnode<-sbConnection$localnode
port<-sbConnection$port
# old <- options(timeout = 60 * 60 * 24 * 30)
# on.exit(options(old))
# library(sandbox)
# evaluateSandbox(localNode,port)
r_exe<-switch(.Platform$OS.type,
"windows"=file.path(R.home("bin"), "Rscript.exe"),
file.path(R.home("bin"), "Rscript"))
localnode
port
# con <- make.socket(host, ID)
con <- socketConnection(host = sbConnection$host,
port = sbConnection$port,
server=isServer,
blocking=TRUE,
open="a+b")
# run new code
sendSand(toEval,sandboxCon)
# run new code
sandbox:::sendSand(toEval,sandboxCon)
# run new code
sandbox:::sendSand(toEval,con)
# run new code
sandbox:::sendSand(toeval,con)
output<-sandbox:::receiveSand(con)
tmp<-unserialize(con)
#inform sandbox session to close
serialize("complete",sandboxCon)
#inform sandbox session to close
serialize("complete",con)
con
close(con)
# con <- make.socket(host, ID)
con <- socketConnection(host = sbConnection$host,
port = sbConnection$port,
server=isServer,
blocking=TRUE,
open="a+b")
# con <- make.socket(host, ID)
con <- socketConnection(host = sbConnection$host,
port = sbConnection$port,
server=isServer,
blocking=TRUE,
open="a+b")
# run new code
sandbox:::sendSand(toeval,con)
output<-sandbox:::receiveSand(con)
unserialize(con)
sandbox:::receiveSand
# con <- make.socket(host, ID)
con <- socketConnection(host = sbConnection$host,
port = sbConnection$port,
server=isServer,
blocking=TRUE,
open="a+b")
# run new code
sandbox:::sendSand(toeval,con)
sandbox:::receiveSand
output<-sandbox:::receiveSand(con)
close(con)
# con <- make.socket(host, ID)
con <- socketConnection(host = sbConnection$host,
port = sbConnection$port,
server=isServer,
blocking=TRUE,
open="a+b")
close(con)
# con <- make.socket(host, ID)
con <- socketConnection(host = sbConnection$host,
port = sbConnection$port,
server=isServer,
blocking=TRUE,
open="a+b")
close(con)
close(con)
# con <- make.socket(host, ID)
con <- socketConnection(host = sbConnection$host,
port = sbConnection$port,
server=isServer,
blocking=TRUE,
open="a+b")
sandbox:::getLocalIP()
close(con)
close(con)
close(con)
# con <- make.socket(host, ID)
con <- socketConnection(host = sbConnection$host,
port = sbConnection$port,
server=isServer,
blocking=TRUE,
open="a+b")
isServer
# con <- make.socket(host, ID)
con <- socketConnection(host = sbConnection$host,
port = sbConnection$port,
server=TRUE,
blocking=TRUE,
open="a+b")
close(con)
close(con)
# con <- make.socket(host, ID)
con <- socketConnection(host = sbConnection$host,
port = sbConnection$port,
server=TRUE,
blocking=TRUE,
open="a+b")
close(con)
# con <- make.socket(host, ID)
con <- socketConnection(host = sbConnection$host,
port = sbConnection$port,
server=TRUE,
blocking=TRUE,
open="a+b")
con
library(sandbox)
library(sandbox)
sandbox({print("hello")},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
# con <- make.socket(host, ID)
con <- socketConnection(host = sbConnection$host,
port = sbConnection$port,
server=TRUE,
blocking=TRUE,
open="a+b")
# run new code
sandbox:::sendSand(toeval,con)
# run new code
sandbox:::sendSand(toeval,con)
# run new code
sandbox:::sendSand(toeval,con)
# run new code
sandbox:::sendSand(toeval,con)
# run new code
sandbox:::sendSand(toeval,con)
serialize(toeval,con)
# con <- make.socket(host, ID)
con <- socketConnection(host = sbConnection$host,
port = sbConnection$port,
server=TRUE,
blocking=TRUE,
open="a+b")
serialize(toeval,con)
sandbox({print("hello")},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
library(sandbox)
con
sandbox({print("hello")},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
sandbox({sessionInfo()},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
sessionInfo()
devtools::test_coverage()
sandbox({},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
unserialize(sandboxCon)
devtools::document()
sandbox({
library(ggplot2)
set.seed(42)
testDF<-data.frame(x=c(1:5),y=runif(5))
ggplot(testDF,aes(x=x,y=y))+
geom_point()+
ggtitle("Please Work!")
},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
sandbox({
# library(ggplot2)
set.seed(42)
testDF<-data.frame(x=c(1:5),y=runif(5))
# ggplot(testDF,aes(x=x,y=y))+
#   geom_point()+
#   ggtitle("Please Work!")
leak(testDF)
},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
testDF
sandbox({
# library(ggplot2)
set.seed(42)
testDF<-data.frame(x=c(1:5),y=runif(5))
# ggplot(testDF,aes(x=x,y=y))+
#   geom_point()+
#   ggtitle("Please Work!")
leak(testDF,"testdf2")
},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
testDF2==testdf
testDF2==testDF
testdf2==testDF
linux<-sandbox({
# library(ggplot2)
set.seed(42)
testDF<-data.frame(x=c(1:5),y=runif(5))
ggplot(testDF,aes(x=x,y=y))+
geom_point()+
ggtitle("Please Work!")
},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
View(linux)
sandbox({
# library(ggplot2)
set.seed(42)
testDF<-data.frame(x=c(1:5),y=runif(5))
plot(testDF$x,testDF$y)
},sbConnection = sandboxConnectionTemplate("192.168.0.31",username = "ellis"))
set.seed(42)
testDF<-data.frame(x=c(1:5),y=runif(5))
plot(testDF$x,testDF$y)
con<-sandbox:::makeSandbox.external("192.168.0.14",22)
# old <- options(timeout = 60 * 60 * 24 * 30)
# on.exit(options(old))
# library(sandbox)
# evaluateSandbox(localNode,port)
r_exe<-switch(.Platform$OS.type,
"windows"=file.path(R.home("bin"), "Rscript.exe"),
file.path(R.home("bin"), "Rscript"))
rscript<-file.path(options("Sandbox_scriptdir"), "start_hosted_ext_Rsession.R")
cmd<-paste(r_exe,"--vanilla --slave",rscript,localnode,port)
localnode<-"192.168.0.14"
port<-22
cmd<-paste(r_exe,"--vanilla --slave",rscript,localnode,port)
cmd
if (.Platform$OS.type == "windows") {
system(cmd, wait = FALSE, input = "",ignore.stdout = TRUE,ignore.stderr = TRUE,show.output.on.console = FALSE)
} else{
system(cmd, wait = FALSE,intern = FALSE,ignore.stdout = TRUE,ignore.stderr = TRUE)
}
library(sandbox)
close(con)
con
sandbox:::getLocalIP()
